{"ast":null,"code":"import * as axios from \"axios\";\nconst baseUrl = \"http://localhost:5000/\";\nlet instance = axios.create({\n  baseUrl: baseUrl,\n  headers: {\n    \"x-auth-token\": sessionStorage.getItem(\"token\")\n  }\n});\nexport const testAPI = {\n  getMyUsers() {\n    return axios.get(\"http://localhost:5000/users\").then(response => response.data);\n  },\n\n  getGoods(pageNumber = 1, pageSize = 10) {\n    return instance.get(`http://localhost:5000/goods?page=${pageNumber}&pageSize=${pageSize}`).then(response => response.data);\n  },\n\n  getGood(id) {\n    return instance.get(baseUrl + `goods/${id}`);\n  },\n\n  login(email, password, rememberMe = false) {\n    return axios.post(\"http://localhost:5000/auth/\", {\n      email,\n      password,\n      rememberMe\n    });\n  },\n\n  register(name, email, password) {\n    return axios.post(\"http://localhost:5000/users\", {\n      name,\n      email,\n      password\n    });\n  },\n\n  forgotPassword(forgotEmail) {\n    return axios.post(\"http://localhost:5000/users/forgot_password\", {\n      forgotEmail\n    });\n  },\n\n  resetPassword(newPassword, verifyPassword, token) {\n    return instance.post(\"http://localhost:5000/users/reset_password\", {\n      newPassword,\n      verifyPassword,\n      token\n    });\n  },\n\n  changeUserPass(oldPass, newPassword, verifyPassword, email) {\n    return instance.post(\"http://localhost:5000/users/change_password\", {\n      oldPass,\n      newPassword,\n      verifyPassword,\n      email\n    });\n  },\n\n  getAuth() {\n    return instance.get(\"http://localhost:5000/auth/user\");\n  },\n\n  getReviews() {\n    return instance.get(\"http://localhost:5000/goods/reviews\").then(response => response.data);\n  },\n\n  setOrders(items, inform, id) {\n    return instance.post(`http://localhost:5000/orders`, {\n      items,\n      inform,\n      userId: id\n    });\n  },\n\n  getOrders(id) {\n    return instance.get(`http://localhost:5000/orders/${id}`);\n  },\n\n  getInform(id) {\n    return instance.get(`http://localhost:5000/inform/${id}`);\n  },\n\n  updateInform(id, inform) {\n    debugger;\n    const config = {\n      header: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return instance.put(`http://localhost:5000/inform/${id}`, {\n      inform,\n      config\n    });\n  },\n\n  setInform(id, inform, isAddInform = false) {\n    return instance.post(`http://localhost:5000/inform/${id}`, {\n      inform,\n      isAddInform\n    });\n  },\n\n  sendHelpMessage(helpMessage, id) {\n    return instance.post(`http://localhost:5000/users/help`, {\n      helpMessage,\n      userId: id\n    });\n  },\n\n  setReviews(name, files, goodsId, rating = 100) {\n    files.append(\"name\", name);\n    files.append(\"rating\", rating);\n    const config = {\n      header: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return instance.post(`http://localhost:5000/goods/reviews/${goodsId}`, files, config);\n  }\n\n};","map":{"version":3,"sources":["/Users/anton/Downloads/myApp-1/client/src/api/api.js"],"names":["axios","baseUrl","instance","create","headers","sessionStorage","getItem","testAPI","getMyUsers","get","then","response","data","getGoods","pageNumber","pageSize","getGood","id","login","email","password","rememberMe","post","register","name","forgotPassword","forgotEmail","resetPassword","newPassword","verifyPassword","token","changeUserPass","oldPass","getAuth","getReviews","setOrders","items","inform","userId","getOrders","getInform","updateInform","config","header","put","setInform","isAddInform","sendHelpMessage","helpMessage","setReviews","files","goodsId","rating","append"],"mappings":"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","sourcesContent":["import * as axios from \"axios\";\n\nconst baseUrl = \"http://localhost:5000/\";\n\nlet instance = axios.create({\n  baseUrl: baseUrl,\n  headers: {\n    \"x-auth-token\": sessionStorage.getItem(\"token\"),\n  },\n});\n\nexport const testAPI = {\n  getMyUsers() {\n    return axios\n      .get(\"http://localhost:5000/users\")\n      .then((response) => response.data);\n  },\n  getGoods(pageNumber = 1, pageSize = 10) {\n    return instance\n      .get(\n        `http://localhost:5000/goods?page=${pageNumber}&pageSize=${pageSize}`\n      )\n      .then((response) => response.data);\n  },\n  getGood(id) {\n    return instance.get(baseUrl + `goods/${id}`);\n  },\n  login(email, password, rememberMe = false) {\n    return axios.post(\"http://localhost:5000/auth/\", {\n      email,\n      password,\n      rememberMe,\n    });\n  },\n  register(name, email, password) {\n    return axios.post(\"http://localhost:5000/users\", { name, email, password });\n  },\n  forgotPassword(forgotEmail) {\n    return axios.post(\"http://localhost:5000/users/forgot_password\", {\n      forgotEmail,\n    });\n  },\n  resetPassword(newPassword, verifyPassword, token) {\n    return instance.post(\"http://localhost:5000/users/reset_password\", {\n      newPassword,\n      verifyPassword,\n      token,\n    });\n  },\n  changeUserPass(oldPass, newPassword, verifyPassword, email) {\n    return instance.post(\"http://localhost:5000/users/change_password\", {\n      oldPass,\n      newPassword,\n      verifyPassword,\n      email,\n    });\n  },\n  getAuth() {\n    return instance.get(\"http://localhost:5000/auth/user\");\n  },\n  getReviews() {\n    return instance\n      .get(\"http://localhost:5000/goods/reviews\")\n      .then((response) => response.data);\n  },\n  setOrders(items, inform, id) {\n    return instance.post(`http://localhost:5000/orders`, {\n      items,\n      inform,\n      userId: id,\n    });\n  },\n  getOrders(id) {\n    return instance.get(`http://localhost:5000/orders/${id}`);\n  },\n  getInform(id) {\n    return instance.get(`http://localhost:5000/inform/${id}`);\n  },\n  updateInform(id, inform) {\n    debugger\n    const config = {\n      header: {'Content-Type': 'multipart/form-data'}\n    };\n    return instance.put(`http://localhost:5000/inform/${id}`, {inform,config} );\n  },\n  setInform(id, inform, isAddInform = false) {\n    return instance.post(`http://localhost:5000/inform/${id}`, {\n      inform,\n      isAddInform,\n    });\n  },\n  sendHelpMessage(helpMessage, id) {\n    return instance.post(`http://localhost:5000/users/help`, {\n      helpMessage,\n      userId: id,\n    });\n  },\n  setReviews(name,files,goodsId,rating=100) {\n   files.append(\"name\",name)\n   files.append(\"rating\",rating)\n    const config = {\n      header: {'Content-Type': 'multipart/form-data'}\n    };\n    return instance.post(\n      `http://localhost:5000/goods/reviews/${goodsId}`,\n      files,\n      config\n    );\n  },\n};\n"]},"metadata":{},"sourceType":"module"}