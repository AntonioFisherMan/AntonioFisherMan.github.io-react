{"ast":null,"code":"import { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_AUTH_USER_DATA = \"SET_USER_DATA\";\nconst SET_CAPTCHA_URL = \"SET_CAPTCHA_URL\";\nlet initialState = {\n  id: null,\n  email: null,\n  password: null,\n  isAuth: false,\n  captchaUrl: null\n};\n\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      return { ...state,\n        ...action.data,\n        isAuth: action.isAuth\n      };\n\n    case SET_CAPTCHA_URL:\n      return { ...state,\n        captchaUrl: action.captchaUrl\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst SetAuthUserData = (data, isAuth) => ({\n  type: SET_AUTH_USER_DATA,\n  data,\n  isAuth\n});\n\nconst SetCaptcha = captchaUrl => ({\n  type: SET_CAPTCHA_URL,\n  captchaUrl\n});\n\nexport const getAuthThunkCreator = () => async dispatch => {\n  let response = await authAPI.getAuth();\n\n  if (response.data.resultCode === 0) {\n    dispatch(SetAuthUserData(response.data.data, true));\n  } else {\n    alert(response.data.messages);\n  }\n};\nexport const loginThunk = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe, captcha);\n  if (response.data.resultCode === 0) dispatch(getAuthThunkCreator());else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrlThunk());\n    }\n\n    let errorMessage = response.data.messages.length > 0 ? response.data.messages[0] : \"some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: errorMessage\n    }));\n  }\n};\nexport const getCaptchaUrlThunk = () => async dispatch => {\n  let response = await securityAPI.getCaptchaUrl();\n  dispatch(SetCaptcha(response.data.url));\n};\nexport const logoutThunk = () => async dispatch => {\n  let response = await authAPI.logout();\n  if (response.data.resultCode === 0) dispatch(SetAuthUserData(null, false));\n};\nexport default AuthReducer;","map":{"version":3,"sources":["/Volumes/Anton/FullStack/myApp/client/src/redux/AuthReducer.js"],"names":["authAPI","securityAPI","stopSubmit","SET_AUTH_USER_DATA","SET_CAPTCHA_URL","initialState","id","email","password","isAuth","captchaUrl","AuthReducer","state","action","type","data","SetAuthUserData","SetCaptcha","getAuthThunkCreator","dispatch","response","getAuth","resultCode","alert","messages","loginThunk","rememberMe","captcha","login","getCaptchaUrlThunk","errorMessage","length","_error","getCaptchaUrl","url","logoutThunk","logout"],"mappings":"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","sourcesContent":["import { authAPI, securityAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\n\nconst SET_AUTH_USER_DATA = \"SET_USER_DATA\";\nconst SET_CAPTCHA_URL=\"SET_CAPTCHA_URL\"\n\nlet initialState = {\n  id: null,\n  email: null,\n  password: null,\n  isAuth: false,\n  captchaUrl:null\n};\n\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      return {\n        ...state,\n        ...action.data,\n        isAuth: action.isAuth,\n      };\n      case SET_CAPTCHA_URL:\n        return{...state,captchaUrl:action.captchaUrl}\n    default:\n      return state;\n  }\n};\n\nconst SetAuthUserData = (data, isAuth) => ({\n  type: SET_AUTH_USER_DATA,\n  data,\n  isAuth,\n});\nconst SetCaptcha=(captchaUrl)=>({type:SET_CAPTCHA_URL,captchaUrl})\n\n\nexport const getAuthThunkCreator = () => async (dispatch) => {\n  let response = await authAPI.getAuth();\n  if (response.data.resultCode === 0) {\n    dispatch(SetAuthUserData(response.data.data, true));\n  } else {\n    alert(response.data.messages);\n  }\n};\n\nexport const loginThunk = (email, password, rememberMe,captcha) => async (dispatch) => {\n  let response= await authAPI.login(email, password, rememberMe,captcha)\n    if (response.data.resultCode === 0) dispatch(getAuthThunkCreator());\n    else {\n      if(response.data.resultCode===10)\n      {\n        dispatch(getCaptchaUrlThunk())\n      }\n      let errorMessage =\n        response.data.messages.length > 0\n          ? response.data.messages[0]\n          : \"some error\";\n      dispatch(stopSubmit(\"login\", { _error: errorMessage }));\n    }\n};\n\nexport const getCaptchaUrlThunk=()=>async(dispatch)=>{\n  let response=await securityAPI.getCaptchaUrl();\n  dispatch(SetCaptcha(response.data.url));\n}\n\nexport const logoutThunk = () => async(dispatch) => {\n  let response = await authAPI.logout()\n  if (response.data.resultCode === 0) dispatch(SetAuthUserData(null, false));\n};\n\nexport default AuthReducer;\n"]},"metadata":{},"sourceType":"module"}