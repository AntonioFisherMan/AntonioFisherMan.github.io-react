{"ast":null,"code":"import { testAPI } from \"../api/api\";\nconst GET_INFORM_OF_USER = \"GET_INFORM_OF_USER\";\nlet initialState = {\n  inform: null\n};\n\nlet InformReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_INFORM_OF_USER:\n      return { ...state,\n        inform: action.inform\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst addInform = inform => ({\n  type: GET_INFORM_OF_USER,\n  inform\n});\n\nexport const getInform = id => dispatch => {\n  testAPI.getInform(id).then(response => {\n    dispatch(addInform(response.data));\n  });\n};\nexport const updateInform = inform => dispatch => {\n  testAPI.updateInform(inform).then(response => {\n    dispatch(addInform(response.data));\n  });\n};\nexport default InformReducer;","map":{"version":3,"sources":["/Users/anton/Desktop/myApp/client/src/redux/InformReducer.js"],"names":["testAPI","GET_INFORM_OF_USER","initialState","inform","InformReducer","state","action","type","addInform","getInform","id","dispatch","then","response","data","updateInform"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AAEA,MAAMC,kBAAkB,GAAG,oBAA3B;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE;AADS,CAAnB;;AAIA,IAAIC,aAAa,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,kBAAL;AACE,aAAO,EAAE,GAAGI,KAAL;AAAYF,QAAAA,MAAM,EAAEG,MAAM,CAACH;AAA3B,OAAP;;AACF;AACE,aAAOE,KAAP;AAJJ;AAMD,CAPD;;AASA,MAAMG,SAAS,GAAEL,MAAD,KAAW;AAACI,EAAAA,IAAI,EAACN,kBAAN;AAAyBE,EAAAA;AAAzB,CAAX,CAAhB;;AAGA,OAAO,MAAMM,SAAS,GAAEC,EAAD,IAAMC,QAAQ,IAAE;AACpCX,EAAAA,OAAO,CAACS,SAAR,CAAkBC,EAAlB,EAAsBE,IAAtB,CAA2BC,QAAQ,IAAE;AACjCF,IAAAA,QAAQ,CAACH,SAAS,CAACK,QAAQ,CAACC,IAAV,CAAV,CAAR;AACH,GAFD;AAGF,CAJM;AAKP,OAAO,MAAMC,YAAY,GAAEZ,MAAD,IAAUQ,QAAQ,IAAE;AAC3CX,EAAAA,OAAO,CAACe,YAAR,CAAqBZ,MAArB,EAA6BS,IAA7B,CAAkCC,QAAQ,IAAE;AACxCF,IAAAA,QAAQ,CAACH,SAAS,CAACK,QAAQ,CAACC,IAAV,CAAV,CAAR;AACH,GAFD;AAGF,CAJM;AAMP,eAAeV,aAAf","sourcesContent":["import { testAPI } from \"../api/api\";\n\nconst GET_INFORM_OF_USER = \"GET_INFORM_OF_USER\";\n\nlet initialState = {\n  inform: null,\n};\n\nlet InformReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_INFORM_OF_USER:\n      return { ...state, inform: action.inform };\n    default:\n      return state;\n  }\n};\n\nconst addInform=(inform)=>({type:GET_INFORM_OF_USER,inform})\n\n\nexport const getInform=(id)=>dispatch=>{\n   testAPI.getInform(id).then(response=>{\n       dispatch(addInform(response.data))\n   })\n}\nexport const updateInform=(inform)=>dispatch=>{\n   testAPI.updateInform(inform).then(response=>{\n       dispatch(addInform(response.data))\n   })\n}\n\nexport default InformReducer"]},"metadata":{},"sourceType":"module"}