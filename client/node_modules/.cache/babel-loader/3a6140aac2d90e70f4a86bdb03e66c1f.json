{"ast":null,"code":"import { testAPI } from \"../api/api\";\nconst GET_INFORM_OF_USER = \"GET_INFORM_OF_USER\";\nlet initialState = {\n  inform: null\n};\n\nlet InformReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_INFORM_OF_USER:\n      return { ...state,\n        inform: action.inform\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst addInform = inform => ({\n  type: GET_INFORM_OF_USER,\n  inform\n});\n\nexport const getInform = () => (dispatch, getState) => {\n  debugger;\n  testAPI.getInform(getState().auth.userId).then(response => {\n    dispatch(addInform(response.data));\n  });\n};\nexport const updateInform = inform => (dispatch, getState) => {\n  testAPI.updateInform(getState().auth.userId, inform).then(response => {\n    dispatch(addInform(response.data));\n    dispatch(returnSuccess(response.data.message, response.status, 'SUCCESS_USER_INFORM_CHANGE'));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'USER_INFORM_CHANGE_ERROR'));\n  });\n};\nexport default InformReducer;","map":{"version":3,"sources":["/Users/anton/Downloads/myApp-1/client/src/redux/InformReducer.js"],"names":["testAPI","GET_INFORM_OF_USER","initialState","inform","InformReducer","state","action","type","addInform","getInform","dispatch","getState","auth","userId","then","response","data","updateInform","returnSuccess","message","status","catch","err","returnErrors"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AAEA,MAAMC,kBAAkB,GAAG,oBAA3B;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE;AADS,CAAnB;;AAIA,IAAIC,aAAa,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,kBAAL;AACE,aAAO,EAAE,GAAGI,KAAL;AAAYF,QAAAA,MAAM,EAAEG,MAAM,CAACH;AAA3B,OAAP;;AACF;AACE,aAAOE,KAAP;AAJJ;AAMD,CAPD;;AASA,MAAMG,SAAS,GAAEL,MAAD,KAAW;AAACI,EAAAA,IAAI,EAACN,kBAAN;AAAyBE,EAAAA;AAAzB,CAAX,CAAhB;;AAEA,OAAO,MAAMM,SAAS,GAAC,MAAI,CAACC,QAAD,EAAUC,QAAV,KAAqB;AAC9C;AACCX,EAAAA,OAAO,CAACS,SAAR,CAAkBE,QAAQ,GAAGC,IAAX,CAAgBC,MAAlC,EAA0CC,IAA1C,CAA+CC,QAAQ,IAAE;AACrDL,IAAAA,QAAQ,CAACF,SAAS,CAACO,QAAQ,CAACC,IAAV,CAAV,CAAR;AACH,GAFD;AAGF,CALM;AAMP,OAAO,MAAMC,YAAY,GAAEd,MAAD,IAAU,CAACO,QAAD,EAAUC,QAAV,KAAqB;AACtDX,EAAAA,OAAO,CAACiB,YAAR,CAAsBN,QAAQ,GAAGC,IAAX,CAAgBC,MAAtC,EAA8CV,MAA9C,EAAsDW,IAAtD,CAA2DC,QAAQ,IAAE;AACjEL,IAAAA,QAAQ,CAACF,SAAS,CAACO,QAAQ,CAACC,IAAV,CAAV,CAAR;AACAN,IAAAA,QAAQ,CAACQ,aAAa,CAACH,QAAQ,CAACC,IAAT,CAAcG,OAAf,EAAuBJ,QAAQ,CAACK,MAAhC,EAAuC,4BAAvC,CAAd,CAAR;AACH,GAHD,EAGGC,KAHH,CAGSC,GAAG,IAAE;AACbZ,IAAAA,QAAQ,CAACa,YAAY,CAACD,GAAG,CAACP,QAAJ,CAAaC,IAAd,EAAmBM,GAAG,CAACP,QAAJ,CAAaK,MAAhC,EAAuC,0BAAvC,CAAb,CAAR;AACD,GALA;AAMF,CAPM;AASP,eAAehB,aAAf","sourcesContent":["import { testAPI } from \"../api/api\";\n\nconst GET_INFORM_OF_USER = \"GET_INFORM_OF_USER\";\n\nlet initialState = {\n  inform: null,\n};\n\nlet InformReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_INFORM_OF_USER:\n      return { ...state, inform: action.inform };\n    default:\n      return state;\n  }\n};\n\nconst addInform=(inform)=>({type:GET_INFORM_OF_USER,inform})\n\nexport const getInform=()=>(dispatch,getState)=>{\n  debugger\n   testAPI.getInform(getState().auth.userId).then(response=>{\n       dispatch(addInform(response.data))\n   })\n}\nexport const updateInform=(inform)=>(dispatch,getState)=>{\n   testAPI.updateInform((getState().auth.userId),inform).then(response=>{\n       dispatch(addInform(response.data))\n       dispatch(returnSuccess(response.data.message,response.status,'SUCCESS_USER_INFORM_CHANGE'))\n   }).catch(err=>{\n    dispatch(returnErrors(err.response.data,err.response.status,'USER_INFORM_CHANGE_ERROR'))\n  })\n}\n\nexport default InformReducer"]},"metadata":{},"sourceType":"module"}