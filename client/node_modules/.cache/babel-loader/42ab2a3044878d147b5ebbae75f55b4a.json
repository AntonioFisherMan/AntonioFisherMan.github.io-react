{"ast":null,"code":"import { returnErrors, returnSuccess, clearErrors } from './SuccessErrorReducer';\nimport { testAPI } from \"../api/api\";\nimport { response } from 'express';\nconst USER_LOADING = \"USER_LOADING\";\nconst USER_LOADED = \"USER_LOADED\";\nconst AUTH_ERROR = \"AUTH_ERROR\";\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nconst LOGIN_FAIL = \"LOGIN_FAIL\";\nconst LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nconst REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nconst REGISTER_FAIL = \"REGISTER_FAIL\";\nconst FORGOT_PASS = \"FORGOT_PASS\";\nconst FORGOT_PASS_RESET = \"FORGOT_PASS_RESET\";\nconst EMAIL_SENT = \"EMAIL_SENT\";\nconst RESET_PASS = \"RESET_PASS\";\nconst RESET_ERROR = \"RESET_ERROR\";\nconst FORGOT_ERROR = \"FORGOT_ERROR\";\nconst initialState = {\n  token: sessionStorage.getItem(\"token\") || \"\",\n  isAuth: null,\n  isLoading: false,\n  user: null,\n  userInform: null,\n  forgotEmail: null,\n  emailSent: false\n};\n\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case USER_LOADED:\n      debugger;\n      sessionStorage.setItem('token', action.payload.token);\n      return { ...state,\n        isAuth: true,\n        user: action.payload.user,\n        userInform: action.userInform\n      };\n\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      sessionStorage.setItem('token', action.payload.token);\n      return { ...state,\n        isAuth: true,\n        isLoading: false\n      };\n\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case REGISTER_FAIL:\n    case LOGOUT_SUCCESS:\n      sessionStorage.removeItem('token');\n      return { ...state,\n        isAuth: false,\n        isLoading: false,\n        user: null,\n        userInform: null,\n        token: null\n      };\n\n    case FORGOT_PASS:\n      return { ...state,\n        forgotEmail: action.forgotEmail\n      };\n\n    case EMAIL_SENT:\n      return { ...state,\n        emailSent: action.bool\n      };\n\n    case FORGOT_PASS_RESET:\n      return { ...state,\n        forgotEmail: action.forgotEmail,\n        emailSent: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const userLoad = (payload, userInform) => ({\n  type: USER_LOADED,\n  payload,\n  userInform\n});\nexport const changePass = forgotEmail => ({\n  type: FORGOT_PASS,\n  forgotEmail\n});\nexport const emailSent = bool => ({\n  type: EMAIL_SENT,\n  bool\n});\nexport const resetEmailSentClear = forgotEmail => ({\n  type: FORGOT_PASS_RESET,\n  forgotEmail\n});\nexport const requestToken = () => (dispatch, getState) => {\n  testAPI.forgotPassword(getState().auth.forgotEmail).then(response => {\n    dispatch(emailSent(true));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, 'FORGOT_ERROR'));\n    dispatch({\n      type: FORGOT_ERROR\n    });\n  });\n};\nexport const resetPass = (newPassword, verifyPassword, token) => dispatch => {\n  testAPI.resetPassword(newPassword, verifyPassword, token).then(response => {\n    dispatch({\n      type: RESET_PASS\n    });\n    dispatch(returnSuccess(response.data.message, response.status, 'SUCCESS_RESET'));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'RESET_ERROR'));\n    dispatch({\n      type: RESET_ERROR\n    });\n  });\n};\nexport const changeUserPass = (oldPass, newPassword, verifyPassword) => (dispatch, getState) => {\n  testAPI.changeUserPass(oldPass, newPassword, verifyPassword, getState().auth.user.email).then(response => {\n    dispatch(returnSuccess(response.data.message, response.status, 'SUCCESS_CHANGE_PASS'));\n  }).catch(err => {\n    debugger;\n    dispatch(returnErrors(err.response.data.message, err.response.status, 'CHANGE_PASS_ERROR'));\n  });\n};\nexport const getAuth = () => async (dispatch, getState) => {\n  try {\n    const token = getState().auth.token;\n    let response = await testAPI.getAuth(token);\n    dispatch(userLoad(response.data));\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  dispatch({\n    type: USER_LOADING\n  });\n  testAPI.login(email, password, rememberMe).then(response => {\n    debugger;\n    dispatch(userLoad(response.data, response.data.inform.inform));\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: response.data\n    });\n    dispatch(clearErrors(null, null, null));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};\nexport const register = (name, email, password) => dispatch => {\n  testAPI.register(name, email, password).then(response => {\n    debugger;\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: response.data\n    });\n    dispatch(userLoad(response.data));\n    dispatch(clearErrors(null, null, null));\n  }).catch(err => {\n    debugger;\n    dispatch(returnErrors(err.response.data.message, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT_SUCCESS\n  });\n  dispatch(clearErrors(null, null, null));\n};\nexport const subscribeNewUser = email => dispatch => {\n  testAPI.subscribeNewUser(email).then(response => {}).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, 'SUBSCRIBER_FAIL'));\n  });\n};\nexport default AuthReducer;","map":{"version":3,"sources":["/Users/anton/Downloads/myApp-1/client/src/redux/AuthReducer.js"],"names":["returnErrors","returnSuccess","clearErrors","testAPI","response","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","FORGOT_PASS","FORGOT_PASS_RESET","EMAIL_SENT","RESET_PASS","RESET_ERROR","FORGOT_ERROR","initialState","token","sessionStorage","getItem","isAuth","isLoading","user","userInform","forgotEmail","emailSent","AuthReducer","state","action","type","setItem","payload","removeItem","bool","userLoad","changePass","resetEmailSentClear","requestToken","dispatch","getState","forgotPassword","auth","then","catch","err","data","message","status","resetPass","newPassword","verifyPassword","resetPassword","changeUserPass","oldPass","email","getAuth","error","login","password","rememberMe","inform","register","name","logout","subscribeNewUser"],"mappings":"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","sourcesContent":["\nimport {returnErrors,returnSuccess,clearErrors} from './SuccessErrorReducer'\nimport { testAPI } from \"../api/api\";\nimport { response } from 'express';\n\n const USER_LOADING=\"USER_LOADING\"\nconst USER_LOADED=\"USER_LOADED\"\nconst AUTH_ERROR=\"AUTH_ERROR\"\nconst LOGIN_SUCCESS=\"LOGIN_SUCCESS\"\nconst LOGIN_FAIL=\"LOGIN_FAIL\"\n const LOGOUT_SUCCESS=\"LOGOUT_SUCCESS\"\nconst REGISTER_SUCCESS=\"REGISTER_SUCCESS\"\nconst REGISTER_FAIL=\"REGISTER_FAIL\"\n\nconst FORGOT_PASS=\"FORGOT_PASS\"\nconst FORGOT_PASS_RESET=\"FORGOT_PASS_RESET\"\nconst EMAIL_SENT=\"EMAIL_SENT\"\nconst RESET_PASS=\"RESET_PASS\"\n\nconst RESET_ERROR=\"RESET_ERROR\"\nconst FORGOT_ERROR=\"FORGOT_ERROR\"\n\nconst initialState = {\n  token:sessionStorage.getItem(\"token\")||\"\",\n  isAuth: null,\n  isLoading: false,\n  user:null,\n  userInform:null,\n  forgotEmail:null,\n  emailSent:false\n};\n\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n\n    case USER_LOADING:\n      return { ...state, isLoading: true };\n      \n    case USER_LOADED:\n     debugger\n      sessionStorage.setItem('token',action.payload.token)\n      return { ...state,isAuth: true, user:action.payload.user,userInform:action.userInform};\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      sessionStorage.setItem('token',action.payload.token)\n      return { ...state,isAuth: true, isLoading: false};\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case REGISTER_FAIL:\n    case LOGOUT_SUCCESS:\n      sessionStorage.removeItem('token')\n      return {\n        ...state,\n        isAuth: false,\n        isLoading: false,\n        user: null,\n        userInform:null,\n        token: null\n      };\n\n      case FORGOT_PASS:\n        return{...state,forgotEmail:action.forgotEmail}\n        case EMAIL_SENT:\n          return{...state,emailSent:action.bool}\n          case FORGOT_PASS_RESET:\n            return{...state,forgotEmail:action.forgotEmail,emailSent:false}\n    default:\n      return state;\n  }\n};\n\nexport const userLoad=(payload,userInform)=>({type:USER_LOADED,payload,userInform})\n\nexport const changePass=(forgotEmail)=>({type:FORGOT_PASS,forgotEmail})\nexport const emailSent=(bool)=>({type:EMAIL_SENT,bool})\nexport const resetEmailSentClear=(forgotEmail)=>({type:FORGOT_PASS_RESET,forgotEmail})\n\n\nexport const requestToken=()=>(dispatch,getState)=>{\n    testAPI.forgotPassword(getState().auth.forgotEmail).then(response=>{\n         dispatch(emailSent(true))\n    })\n    .catch(err=>{\n      dispatch(returnErrors(err.response.data.message,err.response.status,'FORGOT_ERROR'))\n      dispatch({type:FORGOT_ERROR})\n    })\n}\nexport const resetPass=(newPassword,verifyPassword,token)=> dispatch=>{\n  testAPI.resetPassword(newPassword,verifyPassword,token).then(response=>{\n    dispatch({type:RESET_PASS})\n    dispatch(returnSuccess(response.data.message,response.status,'SUCCESS_RESET'))\n  }).catch(err=>{\n    dispatch(returnErrors(err.response.data,err.response.status,'RESET_ERROR'))\n    dispatch({type:RESET_ERROR})\n  })\n}\n\nexport const changeUserPass=(oldPass,newPassword,verifyPassword)=>(dispatch,getState)=>{\n  testAPI.changeUserPass(oldPass,newPassword,verifyPassword,getState().auth.user.email).then(response=>{\n    dispatch(returnSuccess(response.data.message,response.status,'SUCCESS_CHANGE_PASS'))\n  }).catch(err=>{\n    debugger\n    dispatch(returnErrors(err.response.data.message,err.response.status,'CHANGE_PASS_ERROR'))\n  })\n}\n\n\n\nexport const getAuth=()=>async (dispatch,getState)=>{\n  try {\n    const token=getState().auth.token;\n     let response=await testAPI.getAuth(token)\n      dispatch(userLoad(response.data))\n  } catch (error) {\n    dispatch({type:AUTH_ERROR})\n  }\n}\nexport const login = (email,password,rememberMe) => async(dispatch) => {\n  dispatch({type:USER_LOADING})\n  testAPI.login(email,password,rememberMe).then(response=>{\n    debugger\n    dispatch(userLoad(response.data,response.data.inform.inform))\n    dispatch({type:LOGIN_SUCCESS,payload:response.data})\n    dispatch(clearErrors(null,null,null))\n  }).catch(err=>{\n    dispatch(returnErrors(err.response.data.message,err.response.status,'LOGIN_FAIL'))\n    dispatch({type:LOGIN_FAIL})\n  })\n};\n\nexport const register=(name,email,password)=>dispatch=>{\n  testAPI.register(name,email,password).then(response=>{\n    debugger\n    dispatch({type:REGISTER_SUCCESS,payload:response.data})\n    dispatch(userLoad(response.data))\n    dispatch(clearErrors(null,null,null))\n  }).catch(err=>{\n    debugger\n      dispatch(returnErrors(err.response.data.message,err.response.status,'REGISTER_FAIL'))\n       dispatch({type:REGISTER_FAIL})\n  })\n}\n\nexport const logout=()=>dispatch=>{\n  dispatch({type:LOGOUT_SUCCESS})\n  dispatch(clearErrors(null,null,null))\n}\n\nexport const subscribeNewUser=(email)=>dispatch=>{\n  testAPI.subscribeNewUser(email).then(response=>{\n    \n  }).catch(err=>{\n    dispatch(returnErrors(err.response.data.message,err.response.status,'SUBSCRIBER_FAIL'))\n  })\n}\n\nexport default AuthReducer;\n"]},"metadata":{},"sourceType":"module"}