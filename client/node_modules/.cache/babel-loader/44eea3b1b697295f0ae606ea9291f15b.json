{"ast":null,"code":"import { testAPI } from \"../api/api\";\nimport { returnErrors, returnSuccess } from './SuccessErrorReducer';\nconst GET_INFORM_OF_USER = \"GET_INFORM_OF_USER\";\nconst SEND_HELP_MESSAGE_SUCCESS = \"SEND_HELP_MESSAGE_SUCCESS\";\nlet initialState = {\n  inform: null,\n  isAddInform: false,\n  sendHelpMessage: false\n};\n\nlet InformReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_INFORM_OF_USER:\n      return { ...state,\n        inform: action.inform,\n        isAddInform: action.inform.isAddInform\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst addInform = (inform, isAddInform) => ({\n  type: GET_INFORM_OF_USER,\n  inform,\n  isAddInform\n});\n\nconst sendHelpMessageSuccess = bool => ({\n  type: SEND_HELP_MESSAGE_SUCCESS,\n  bool\n});\n\nexport const getInform = () => (dispatch, getState) => {\n  testAPI.getInform(getState().auth.userId).then(response => {\n    dispatch(addInform(response.data));\n  });\n};\nexport const updateInform = inform => (dispatch, getState) => {\n  testAPI.updateInform(getState().auth.userId, inform).then(response => {\n    dispatch(returnSuccess(response.data.message, response.status, 'SUCCESS_USER_INFORM_CHANGE'));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'USER_INFORM_CHANGE_ERROR'));\n  });\n};\nexport const setInform = (inform, isAddInform = true) => (dispatch, getState) => {\n  testAPI.setInform(getState().auth.userId, inform, isAddInform).then(response => {\n    dispatch(addInform(response.data));\n  });\n};\nexport const sendHelpMessage = helpMessage => (dispatch, getState) => {\n  testAPI.sendHelpMessage(helpMessage, getState().auth.userId).then(response => {\n    dispatch(sendHelpMessageSuccess(true));\n    dispatch(returnSuccess(response.data.message, response.status, 'SUCCESS_HELP_MESSAGE'));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'ERROR_HELP_MESSAGE'));\n  });\n};\nexport default InformReducer;","map":{"version":3,"sources":["/Users/anton/Downloads/myApp-1/client/src/redux/InformReducer.js"],"names":["testAPI","returnErrors","returnSuccess","GET_INFORM_OF_USER","SEND_HELP_MESSAGE_SUCCESS","initialState","inform","isAddInform","sendHelpMessage","InformReducer","state","action","type","addInform","sendHelpMessageSuccess","bool","getInform","dispatch","getState","auth","userId","then","response","data","updateInform","message","status","catch","err","setInform","helpMessage"],"mappings":"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","sourcesContent":["import { testAPI } from \"../api/api\";\nimport {returnErrors,returnSuccess} from './SuccessErrorReducer'\nconst GET_INFORM_OF_USER = \"GET_INFORM_OF_USER\";\nconst SEND_HELP_MESSAGE_SUCCESS=\"SEND_HELP_MESSAGE_SUCCESS\"\nlet initialState = {\n  inform: null,\n  isAddInform:false,\n  sendHelpMessage:false\n};\n\nlet InformReducer = (state = initialState, action) => {\n  switch (action.type) {\n   \n    case GET_INFORM_OF_USER:\n      return { ...state, inform: action.inform,isAddInform:action.inform.isAddInform};\n    default:\n      return state;\n  }\n};\n\nconst addInform=(inform,isAddInform)=>({type:GET_INFORM_OF_USER,inform,isAddInform})\nconst sendHelpMessageSuccess=(bool)=>({type:SEND_HELP_MESSAGE_SUCCESS,bool})\nexport const getInform=()=>(dispatch,getState)=>{\n   testAPI.getInform(getState().auth.userId).then(response=>{\n       dispatch(addInform(response.data))\n   })\n}\nexport const updateInform=(inform)=>(dispatch,getState)=>{\n  \n   testAPI.updateInform((getState().auth.userId),inform).then(response=>{\n       dispatch(returnSuccess(response.data.message,response.status,'SUCCESS_USER_INFORM_CHANGE'))\n   }).catch(err=>{\n    dispatch(returnErrors(err.response.data,err.response.status,'USER_INFORM_CHANGE_ERROR'))\n  })\n}\nexport const setInform=(inform,isAddInform=true)=>(dispatch,getState)=>{\n  testAPI.setInform((getState().auth.userId),inform,isAddInform).then(response=>{\n    dispatch(addInform(response.data))\n  })\n}\n\nexport const sendHelpMessage=(helpMessage)=>(dispatch,getState)=>{\n  testAPI.sendHelpMessage(helpMessage,getState().auth.userId).then(response=>{\n    dispatch(sendHelpMessageSuccess(true))\n    dispatch(returnSuccess(response.data.message,response.status,'SUCCESS_HELP_MESSAGE'))\n  }).catch(err=>{\n    dispatch(returnErrors(err.response.data,err.response.status,'ERROR_HELP_MESSAGE'))\n  })\n}\n\nexport default InformReducer"]},"metadata":{},"sourceType":"module"}