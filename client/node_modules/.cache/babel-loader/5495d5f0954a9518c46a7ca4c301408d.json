{"ast":null,"code":"import { clearCardItems } from './CardReducer';\nimport { testAPI } from \"../api/api\";\nimport { returnSuccess } from './SuccessErrorReducer';\nconst ADD_ORDERS = \"ADD_ORDERS\";\nconst ADD_UNLOGINORDER = \"ADD_UNLOGINORDER\";\nlet initialState = {\n  orders: [],\n  unloginOrder: null,\n  inform: null\n};\n\nlet OrdersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_ORDERS:\n      return { ...state,\n        orders: [...action.data]\n      };\n\n    case ADD_UNLOGINORDER:\n      return { ...state,\n        unloginOrder: action.data\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const addOrders = data => ({\n  type: ADD_ORDERS,\n  data\n});\n\nconst addUnloginOrders = data => ({\n  type: ADD_UNLOGINORDER,\n  data\n});\n\nexport const addUnloginOrdersThunk = data => dispatch => {\n  debugger;\n  testAPI.setUnloginOrders(data).then(response => {\n    dispatch(addUnloginOrders(data));\n    dispatch(clearCardItems(null, null, null));\n  });\n};\nexport const getOrders = id => dispatch => {\n  debugger;\n  testAPI.getOrders(id).then(response => {\n    dispatch(addOrders(response.data));\n  });\n};\nexport const addOrdersThunk = ({\n  items,\n  inform,\n  id\n}) => (dispatch, getState) => {\n  testAPI.setOrders(items, inform, getState().auth.user.id).then(response => {\n    dispatch(clearCardItems(null, null, null));\n    dispatch(returnSuccess(response.data.message, response.status, 'SUCCESS_ADD_ORDER'));\n  });\n};\nexport default OrdersReducer;","map":{"version":3,"sources":["/Users/anton/Downloads/myApp-1/client/src/redux/OrdersReducer.js"],"names":["clearCardItems","testAPI","returnSuccess","ADD_ORDERS","ADD_UNLOGINORDER","initialState","orders","unloginOrder","inform","OrdersReducer","state","action","type","data","addOrders","addUnloginOrders","addUnloginOrdersThunk","dispatch","setUnloginOrders","then","response","getOrders","id","addOrdersThunk","items","getState","setOrders","auth","user","message","status"],"mappings":"AAAA,SAAQA,cAAR,QAA6B,eAA7B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAGA,MAAMC,UAAU,GAAC,YAAjB;AACA,MAAMC,gBAAgB,GAAC,kBAAvB;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,YAAY,EAAC,IAFI;AAGjBC,EAAAA,MAAM,EAAC;AAHU,CAAnB;;AAMA,IAAIC,aAAa,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,UAAL;AACI,aAAM,EAAC,GAAGO,KAAJ;AAAUJ,QAAAA,MAAM,EAAC,CAAC,GAAGK,MAAM,CAACE,IAAX;AAAjB,OAAN;;AACA,SAAKT,gBAAL;AACA,aAAM,EAAC,GAAGM,KAAJ;AAAUH,QAAAA,YAAY,EAACI,MAAM,CAACE;AAA9B,OAAN;;AACN;AACE,aAAOH,KAAP;AANJ;AAQD,CATD;;AAYC,OAAO,MAAMI,SAAS,GAAED,IAAD,KAAS;AAACD,EAAAA,IAAI,EAACT,UAAN;AAAiBU,EAAAA;AAAjB,CAAT,CAAhB;;AACN,MAAME,gBAAgB,GAAEF,IAAD,KAAS;AAACD,EAAAA,IAAI,EAACR,gBAAN;AAAuBS,EAAAA;AAAvB,CAAT,CAAvB;;AAGD,OAAO,MAAMG,qBAAqB,GAAEH,IAAD,IAAQI,QAAQ,IAAE;AACnD;AACAhB,EAAAA,OAAO,CAACiB,gBAAR,CAAyBL,IAAzB,EAA+BM,IAA/B,CAAoCC,QAAQ,IAAE;AAC7CH,IAAAA,QAAQ,CAACF,gBAAgB,CAACF,IAAD,CAAjB,CAAR;AACAI,IAAAA,QAAQ,CAACjB,cAAc,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,CAAf,CAAR;AACH,GAHE;AAIF,CANO;AAOR,OAAO,MAAMqB,SAAS,GAAEC,EAAD,IAAML,QAAQ,IAAE;AACrC;AACDhB,EAAAA,OAAO,CAACoB,SAAR,CAAkBC,EAAlB,EAAsBH,IAAtB,CAA2BC,QAAQ,IAAE;AACjCH,IAAAA,QAAQ,CAACH,SAAS,CAACM,QAAQ,CAACP,IAAV,CAAV,CAAR;AACH,GAFD;AAGA,CALM;AAOP,OAAO,MAAMU,cAAc,GAAC,CAAC;AAACC,EAAAA,KAAD;AAAOhB,EAAAA,MAAP;AAAcc,EAAAA;AAAd,CAAD,KAAqB,CAACL,QAAD,EAAUQ,QAAV,KAAqB;AAClExB,EAAAA,OAAO,CAACyB,SAAR,CAAkBF,KAAlB,EAAwBhB,MAAxB,EAA+BiB,QAAQ,GAAGE,IAAX,CAAgBC,IAAhB,CAAqBN,EAApD,EAAwDH,IAAxD,CAA6DC,QAAQ,IAAE;AACnEH,IAAAA,QAAQ,CAACjB,cAAc,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,CAAf,CAAR;AACAiB,IAAAA,QAAQ,CAACf,aAAa,CAACkB,QAAQ,CAACP,IAAT,CAAcgB,OAAf,EAAuBT,QAAQ,CAACU,MAAhC,EAAuC,mBAAvC,CAAd,CAAR;AACH,GAHD;AAKH,CANM;AAQP,eAAerB,aAAf","sourcesContent":["import {clearCardItems} from './CardReducer'\nimport { testAPI } from \"../api/api\";\nimport { returnSuccess } from './SuccessErrorReducer';\n\n\nconst ADD_ORDERS=\"ADD_ORDERS\"\nconst ADD_UNLOGINORDER=\"ADD_UNLOGINORDER\"\n\nlet initialState = {\n  orders: [],\n  unloginOrder:null,\n  inform:null\n};\n\nlet OrdersReducer = (state = initialState, action) => {\n  switch (action.type) {\n      case ADD_ORDERS:\n          return{...state,orders:[...action.data]}\n          case ADD_UNLOGINORDER:\n          return{...state,unloginOrder:action.data}\n    default:\n      return state;\n  }\n};\n\n\n export const addOrders=(data)=>({type:ADD_ORDERS,data})\n  const addUnloginOrders=(data)=>({type:ADD_UNLOGINORDER,data})\n\n\n export const addUnloginOrdersThunk=(data)=>dispatch=>{\n   debugger\n   testAPI.setUnloginOrders(data).then(response=>{\n    dispatch(addUnloginOrders(data))\n    dispatch(clearCardItems(null,null,null))\n})\n}\nexport const getOrders=(id)=>dispatch=>{\n  debugger\n testAPI.getOrders(id).then(response=>{\n     dispatch(addOrders(response.data));\n })\n}\n\nexport const addOrdersThunk=({items,inform,id})=>(dispatch,getState)=>{\n    testAPI.setOrders(items,inform,getState().auth.user.id).then(response=>{\n        dispatch(clearCardItems(null,null,null))\n        dispatch(returnSuccess(response.data.message,response.status,'SUCCESS_ADD_ORDER'))\n    })\n    \n}\n\nexport default OrdersReducer"]},"metadata":{},"sourceType":"module"}