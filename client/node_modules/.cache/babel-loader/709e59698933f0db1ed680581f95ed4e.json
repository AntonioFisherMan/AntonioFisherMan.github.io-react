{"ast":null,"code":"import { USER_LOADING, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS } from \"./actions\";\nimport { returnErrors, clearErrors } from './errorReducer';\nimport { testAPI } from \"../../api/api\";\nimport { get } from \"mongoose\";\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  isAuth: null,\n  isLoading: false,\n  user: null\n};\n\nconst authTestReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case USER_LOADED:\n      return { ...state,\n        isLoading: false,\n        isAuth: true,\n        user: action.payload\n      };\n\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      debugger;\n      localStorage.setItem('token', action.payload.token);\n      return { ...state,\n        ...action.payload,\n        isAuth: true,\n        isLoading: false\n      };\n\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case REGISTER_FAIL:\n    case LOGOUT_SUCCESS:\n      localStorage.removeItem('token');\n      return { ...state,\n        isAuth: false,\n        isLoading: false,\n        user: null,\n        token: null\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const userLoad = payload => ({\n  type: USER_LOADED,\n  payload\n});\nexport const getAuth = () => dispatch => {};\nexport const login = (email, password) => async dispatch => {\n  testAPI.login(email, password).then(response => {\n    dispatch(userLoad(response.data.user));\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: response.data\n    });\n    dispatch(clearErrors(null, null, null));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};\nexport const register = (name, email, password) => dispatch => {\n  testAPI.register(name, email, password).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: response.data\n    });\n  });\n};\nexport const logout = () => ({\n  type: LOGOUT_SUCCESS\n});\nexport default authTestReducer;","map":{"version":3,"sources":["/Volumes/Anton/FullStack/myApp/client/src/redux/Test/authReducer.js"],"names":["USER_LOADING","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","returnErrors","clearErrors","testAPI","get","initialState","token","localStorage","getItem","isAuth","isLoading","user","authTestReducer","state","action","type","payload","setItem","removeItem","userLoad","getAuth","dispatch","login","email","password","then","response","data","catch","err","status","register","name","logout"],"mappings":"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","sourcesContent":["import {\n  USER_LOADING,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n} from \"./actions\";\n\nimport {returnErrors,clearErrors} from './errorReducer'\nimport { testAPI } from \"../../api/api\";\nimport { get } from \"mongoose\";\n\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  isAuth: null,\n  isLoading: false,\n  user:null,\n};\n\nconst authTestReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_LOADING:\n      return { ...state, isLoading: true };\n    case USER_LOADED:\n      return { ...state, isLoading: false, isAuth: true, user: action.payload };\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      debugger\n      localStorage.setItem('token',action.payload.token)\n      return { ...state, ...action.payload, isAuth: true, isLoading: false };\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case REGISTER_FAIL:\n    case LOGOUT_SUCCESS:\n   localStorage.removeItem('token')\n      return {\n        ...state,\n        isAuth: false,\n        isLoading: false,\n        user: null,\n        token: null,\n      };\n    default:\n      return state;\n  }\n};\nexport const userLoad=(payload)=>({type:USER_LOADED,payload})\n\nexport const getAuth=()=>dispatch=>{\n\n}\n\nexport const login = (email,password) => async(dispatch) => {\n  testAPI.login(email,password).then(response=>{\n    dispatch(userLoad(response.data.user))\n    dispatch({type:LOGIN_SUCCESS,payload:response.data})\n    dispatch(clearErrors(null,null,null))\n  }).catch(err=>{\n    dispatch(returnErrors(err.response.data,err.response.status,'LOGIN_FAIL'))\n    dispatch({type:LOGIN_FAIL})\n  })\n};\n\nexport const register=(name,email,password)=>dispatch=>{\n  testAPI.register(name,email,password).then(response=>{\n    dispatch({type:REGISTER_SUCCESS,payload:response.data})\n  })\n}\n\nexport const logout=()=>({type:LOGOUT_SUCCESS})\n\nexport default authTestReducer;\n"]},"metadata":{},"sourceType":"module"}