{"ast":null,"code":"import * as axios from \"axios\";\nconst baseUrl = \"http://localhost:5000/\";\nlet instance = axios.create({\n  baseUrl: baseUrl,\n  headers: {\n    'Content-Type': 'multipart/form-data',\n    'boundary': 'someArbitraryUniqueString',\n    \"x-auth-token\": sessionStorage.getItem('token')\n  }\n});\nexport const testAPI = {\n  getMyUsers() {\n    return axios.get(\"http://localhost:5000/users\").then(response => response.data);\n  },\n\n  getGoods(pageNumber = 1, pageSize = 10) {\n    return instance.get(`http://localhost:5000/goods?page=${pageNumber}&pageSize=${pageSize}`).then(response => response.data);\n  },\n\n  getGood(id) {\n    return instance.get(baseUrl + `goods/${id}`);\n  },\n\n  login(email, password, rememberMe = false) {\n    return axios.post(\"http://localhost:5000/auth/\", {\n      email,\n      password,\n      rememberMe\n    });\n  },\n\n  register(name, email, password) {\n    return axios.post(\"http://localhost:5000/users\", {\n      name,\n      email,\n      password\n    });\n  },\n\n  forgotPassword(forgotEmail) {\n    return axios.post(\"http://localhost:5000/users/forgot_password\", {\n      forgotEmail\n    });\n  },\n\n  resetPassword(newPassword, verifyPassword, token) {\n    return instance.post(\"http://localhost:5000/users/reset_password\", {\n      newPassword,\n      verifyPassword,\n      token\n    });\n  },\n\n  changeUserPass(oldPass, newPassword, verifyPassword, email) {\n    return instance.post(\"http://localhost:5000/users/change_password\", {\n      oldPass,\n      newPassword,\n      verifyPassword,\n      email\n    });\n  },\n\n  getAuth() {\n    return instance.get(\"http://localhost:5000/auth/user\");\n  },\n\n  getReviews() {\n    return instance.get(\"http://localhost:5000/goods/reviews\").then(response => response.data);\n  },\n\n  setOrders(items, inform, id) {\n    return instance.post(`http://localhost:5000/orders`, {\n      items,\n      inform,\n      userId: id\n    });\n  },\n\n  getOrders(id) {\n    return instance.get(`http://localhost:5000/orders/${id}`);\n  },\n\n  getInform(id) {\n    return instance.get(`http://localhost:5000/inform/${id}`);\n  },\n\n  updateInform(id, inform) {\n    return instance.put(`http://localhost:5000/inform/${id}`, {\n      inform\n    });\n  },\n\n  setInform(id, inform, isAddInform = false) {\n    return instance.post(`http://localhost:5000/inform/${id}`, {\n      inform,\n      isAddInform\n    });\n  },\n\n  sendHelpMessage(helpMessage, id) {\n    return instance.post(`http://localhost:5000/users/help`, {\n      helpMessage,\n      userId: id\n    });\n  },\n\n  setReviews(name, photo, data, reviewText, rating, goodsId) {\n    debugger;\n    var images = new FormData();\n    images.append('image', data[0]);\n    images.append('image1', data[1]);\n    images.append('image2', data[2]);\n    return instance.post(`http://localhost:5000/goods/reviews/${goodsId}`, {\n      images\n    }, {\n      headers: {\n        'content-type': `multipart/form-data; boundary=${images.boundary}`\n      }\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/anton/Downloads/myApp-1/client/src/api/api.js"],"names":["axios","baseUrl","instance","create","headers","sessionStorage","getItem","testAPI","getMyUsers","get","then","response","data","getGoods","pageNumber","pageSize","getGood","id","login","email","password","rememberMe","post","register","name","forgotPassword","forgotEmail","resetPassword","newPassword","verifyPassword","token","changeUserPass","oldPass","getAuth","getReviews","setOrders","items","inform","userId","getOrders","getInform","updateInform","put","setInform","isAddInform","sendHelpMessage","helpMessage","setReviews","photo","reviewText","rating","goodsId","images","FormData","append","boundary"],"mappings":"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","sourcesContent":["import * as axios from \"axios\";\n\n\nconst baseUrl = \"http://localhost:5000/\";\n \nlet instance = axios.create({\n  baseUrl: baseUrl,\n  headers: {\n    'Content-Type':'multipart/form-data',\n    'boundary':'someArbitraryUniqueString',\n    \"x-auth-token\":sessionStorage.getItem('token')\n  },\n});\n\nexport const testAPI = {\n  getMyUsers() {\n    return axios\n      .get(\"http://localhost:5000/users\")\n      .then((response) => response.data);\n  },\n  getGoods(pageNumber=1,pageSize=10) {\n    return instance\n      .get(`http://localhost:5000/goods?page=${pageNumber}&pageSize=${pageSize}`)\n      .then((response) => response.data);\n  },\n  getGood(id){\n   return instance.get(baseUrl+`goods/${id}`)\n  },\n  login(email, password,rememberMe=false) {\n    return axios.post(\"http://localhost:5000/auth/\", { email, password,rememberMe });\n  },\n  register(name, email, password) {\n    return axios.post(\"http://localhost:5000/users\", { name, email, password });\n  },\n  forgotPassword(forgotEmail){\n    return axios.post(\"http://localhost:5000/users/forgot_password\", { forgotEmail });\n  },\n  resetPassword(newPassword,verifyPassword,token){\n    return instance.post(\"http://localhost:5000/users/reset_password\",{newPassword,verifyPassword,token})\n  },\n  changeUserPass(oldPass,newPassword,verifyPassword,email){\n    return instance.post(\"http://localhost:5000/users/change_password\",{oldPass,newPassword,verifyPassword,email})\n  },\n  getAuth() {\n    return instance.get(\"http://localhost:5000/auth/user\")\n  },\n  getReviews(){\n    return instance.get(\"http://localhost:5000/goods/reviews\")\n    .then(response=>response.data)\n  },\n  setOrders(items,inform,id){\n    \n   return instance.post(`http://localhost:5000/orders`,{items,inform,userId:id})\n  },\n  getOrders(id){\n    return instance.get(`http://localhost:5000/orders/${id}`)\n  },\n  getInform(id){\n   return instance.get(`http://localhost:5000/inform/${id}`)\n  },\n  updateInform(id,inform){\n    return instance.put(`http://localhost:5000/inform/${id}`,{inform})\n  },\n  setInform(id,inform,isAddInform=false){\n    return instance.post(`http://localhost:5000/inform/${id}`,{inform,isAddInform})\n  },\n  sendHelpMessage(helpMessage,id){\n    return instance.post(`http://localhost:5000/users/help`,{helpMessage,userId:id})\n  },\n  setReviews(name,photo,data,reviewText,rating,goodsId){\n    debugger\n   \n      var images = new FormData()\n      images.append('image', data[0])\n      images.append('image1', data[1])\n      images.append('image2', data[2])\n     return instance.post(`http://localhost:5000/goods/reviews/${goodsId}`,{images},{\n      headers: {\n        'content-type': `multipart/form-data; boundary=${images.boundary}`,\n        },\n     })\n    }\n};\n"]},"metadata":{},"sourceType":"module"}