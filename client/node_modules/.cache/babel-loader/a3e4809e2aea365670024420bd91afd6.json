{"ast":null,"code":"import * as axios from \"axios\";\nconst baseUrl = \"http://localhost:5000/\";\nlet instance = axios.create({\n  baseUrl: baseUrl,\n  headers: {\n    \"x-auth-token\": sessionStorage.getItem(\"token\")\n  }\n});\nexport const testAPI = {\n  changeFilter(data, pageSize = 10, pageNumber = 1) {\n    debugger;\n    return axios.post(`http://localhost:5000/goods?page=${pageNumber}&pageSize=${pageSize}`, {\n      data\n    });\n  },\n\n  subscribeNewUser(email) {\n    return axios.post(baseUrl + 'auth/subscribe', {\n      email\n    });\n  },\n\n  getMyUsers() {\n    return axios.get(\"http://localhost:5000/users\").then(response => response.data);\n  },\n\n  getGood(id) {\n    return instance.get(baseUrl + `goods/${id}`);\n  },\n\n  login(email, password, rememberMe = false) {\n    return axios.post(\"http://localhost:5000/auth/\", {\n      email,\n      password,\n      rememberMe\n    });\n  },\n\n  register(name, email, password) {\n    return axios.post(\"http://localhost:5000/users\", {\n      name,\n      email,\n      password\n    });\n  },\n\n  forgotPassword(forgotEmail) {\n    return axios.post(\"http://localhost:5000/users/forgot_password\", {\n      forgotEmail\n    });\n  },\n\n  resetPassword(newPassword, verifyPassword, token) {\n    return instance.post(\"http://localhost:5000/users/reset_password\", {\n      newPassword,\n      verifyPassword,\n      token\n    });\n  },\n\n  changeUserPass(oldPass, newPassword, verifyPassword, email) {\n    return instance.post(\"http://localhost:5000/users/change_password\", {\n      oldPass,\n      newPassword,\n      verifyPassword,\n      email\n    });\n  },\n\n  getAuth() {\n    return instance.get(\"http://localhost:5000/auth/user\");\n  },\n\n  getReviews() {\n    return instance.get(\"http://localhost:5000/goods/reviews\").then(response => response.data);\n  },\n\n  setOrders(items, inform, id) {\n    debugger;\n    return instance.post(`http://localhost:5000/orders`, {\n      items,\n      inform,\n      userId: id\n    });\n  },\n\n  setUnloginOrders(data) {\n    debugger;\n    return instance.post(`http://localhost:5000/orders/unlogin`, {\n      data\n    });\n  },\n\n  getOrders(id) {\n    return instance.get(`http://localhost:5000/orders/${id}`);\n  },\n\n  getInform(id) {\n    return instance.get(`http://localhost:5000/inform/${id}`);\n  },\n\n  updateInform(id, inform) {\n    debugger;\n    const config = {\n      header: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return instance.put(`http://localhost:5000/inform/${id}`, inform, config);\n  },\n\n  setInform(id, inform) {\n    inform.append(\"isAddInform\", true);\n    const config = {\n      header: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return instance.post(`http://localhost:5000/inform/${id}`, inform, config);\n  },\n\n  sendHelpMessage(helpMessage, id) {\n    return instance.post(`http://localhost:5000/users/help`, {\n      helpMessage,\n      userId: id\n    });\n  },\n\n  setReviews(name, photo, files, goodsId, rating = 100) {\n    debugger;\n    files.append(\"name\", name);\n    files.append(\"photo\", photo);\n    files.append(\"rating\", rating);\n    const config = {\n      header: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return instance.post(`http://localhost:5000/goods/reviews/${goodsId}`, files, config);\n  }\n\n};","map":{"version":3,"sources":["/Users/anton/Downloads/myApp-1/client/src/api/api.js"],"names":["axios","baseUrl","instance","create","headers","sessionStorage","getItem","testAPI","changeFilter","data","pageSize","pageNumber","post","subscribeNewUser","email","getMyUsers","get","then","response","getGood","id","login","password","rememberMe","register","name","forgotPassword","forgotEmail","resetPassword","newPassword","verifyPassword","token","changeUserPass","oldPass","getAuth","getReviews","setOrders","items","inform","userId","setUnloginOrders","getOrders","getInform","updateInform","config","header","put","setInform","append","sendHelpMessage","helpMessage","setReviews","photo","files","goodsId","rating"],"mappings":"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","sourcesContent":["import * as axios from \"axios\";\n\nconst baseUrl = \"http://localhost:5000/\";\n\nlet instance = axios.create({\n  baseUrl: baseUrl,\n  headers: {\n    \"x-auth-token\": sessionStorage.getItem(\"token\"),\n  },\n});\n\nexport const testAPI = {\n  changeFilter(data,pageSize=10,pageNumber=1){\n    debugger\n    return axios.post(\n      `http://localhost:5000/goods?page=${pageNumber}&pageSize=${pageSize}`,{data}\n    )\n},\nsubscribeNewUser(email){\nreturn axios.post( baseUrl+'auth/subscribe',{email})\n},\n  getMyUsers() {\n    return axios\n      .get(\"http://localhost:5000/users\")\n      .then((response) => response.data);\n  },\n  getGood(id) {\n    return instance.get(baseUrl + `goods/${id}`);\n  },\n  login(email, password, rememberMe = false) {\n    return axios.post(\"http://localhost:5000/auth/\", {\n      email,\n      password,\n      rememberMe,\n    });\n  },\n  register(name, email, password) {\n    return axios.post(\"http://localhost:5000/users\", { name, email, password });\n  },\n  forgotPassword(forgotEmail) {\n    return axios.post(\"http://localhost:5000/users/forgot_password\", {\n      forgotEmail,\n    });\n  },\n  resetPassword(newPassword, verifyPassword, token) {\n    return instance.post(\"http://localhost:5000/users/reset_password\", {\n      newPassword,\n      verifyPassword,\n      token,\n    });\n  },\n  changeUserPass(oldPass, newPassword, verifyPassword, email) {\n    return instance.post(\"http://localhost:5000/users/change_password\", {\n      oldPass,\n      newPassword,\n      verifyPassword,\n      email,\n    });\n  },\n  getAuth() {\n    return instance.get(\"http://localhost:5000/auth/user\");\n  },\n  getReviews() {\n    return instance\n      .get(\"http://localhost:5000/goods/reviews\")\n      .then((response) => response.data);\n  },\n  setOrders(items, inform, id) {\n    debugger\n    return instance.post(`http://localhost:5000/orders`, {\n      items,\n      inform,\n      userId: id,\n    });\n  },\n  setUnloginOrders(data){\n    debugger\n    return instance.post(`http://localhost:5000/orders/unlogin`, {\n      data\n    });\n  },\n  getOrders(id) {\n    return instance.get(`http://localhost:5000/orders/${id}`);\n  },\n  getInform(id) {\n    return instance.get(`http://localhost:5000/inform/${id}`);\n  },\n  updateInform(id, inform) {\n    debugger\n    const config = {\n      header: {'Content-Type': 'multipart/form-data'}\n    };\n    return instance.put(`http://localhost:5000/inform/${id}`,inform,config );\n  },\n  setInform(id,inform) {\n    inform.append(\"isAddInform\",true)\n    const config = {\n      header: {'Content-Type':'multipart/form-data'}\n    };\n    return instance.post(`http://localhost:5000/inform/${id}`,inform,config );\n  },\n  sendHelpMessage(helpMessage, id) {\n    return instance.post(`http://localhost:5000/users/help`, {\n      helpMessage,\n      userId: id,\n    });\n  },\n  setReviews(name,photo,files,goodsId,rating=100) {\n    debugger\n   files.append(\"name\",name)\n   files.append(\"photo\",photo)\n   files.append(\"rating\",rating)\n    const config = {\n      header: {'Content-Type': 'multipart/form-data'}\n    };\n    return instance.post(\n      `http://localhost:5000/goods/reviews/${goodsId}`,\n      files,\n      config\n    );\n  },\n};\n"]},"metadata":{},"sourceType":"module"}