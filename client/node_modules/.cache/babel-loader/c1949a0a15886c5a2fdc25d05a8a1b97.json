{"ast":null,"code":"import { testAPI } from \"../api/api\";\nimport { returnErrors, returnSuccess } from './SuccessErrorReducer';\nconst GET_INFORM_OF_USER = \"GET_INFORM_OF_USER\";\nlet initialState = {\n  inform: null,\n  isAddInform: false\n};\n\nlet InformReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_INFORM_OF_USER:\n      debugger;\n      return { ...state,\n        inform: action.inform,\n        isAddInform: action.inform.isAddInform\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst addInform = (inform, isAddInform) => ({\n  type: GET_INFORM_OF_USER,\n  inform,\n  isAddInform\n});\n\nexport const getInform = () => (dispatch, getState) => {\n  debugger;\n  testAPI.getInform(getState().auth.userId).then(response => {\n    dispatch(addInform(response.data));\n  });\n};\nexport const updateInform = inform => (dispatch, getState) => {\n  debugger;\n  testAPI.updateInform(getState().auth.userId, inform).then(response => {\n    dispatch(returnSuccess(response.data.message, response.status, 'SUCCESS_USER_INFORM_CHANGE'));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'USER_INFORM_CHANGE_ERROR'));\n  });\n};\nexport const setInform = (inform, isAddInform = true) => (dispatch, getState) => {\n  debugger;\n  testAPI.setInform(getState().auth.userId, inform, isAddInform).then(response => {\n    dispatch(addInform(response.data));\n  });\n};\nexport const sendHelpMessage = helpMessage => dispatch => {\n  testAPI.sendHelpMessage().then(response => {\n    dispatch(returnSuccess(response.data.message, response.status, 'SUCCESS_HELP_MESSAGE'));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'ERROR_HELP_MESSAGE'));\n  });\n};\nexport default InformReducer;","map":{"version":3,"sources":["/Users/anton/Downloads/myApp-1/client/src/redux/InformReducer.js"],"names":["testAPI","returnErrors","returnSuccess","GET_INFORM_OF_USER","initialState","inform","isAddInform","InformReducer","state","action","type","addInform","getInform","dispatch","getState","auth","userId","then","response","data","updateInform","message","status","catch","err","setInform","sendHelpMessage","helpMessage"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAAQC,YAAR,EAAqBC,aAArB,QAAyC,uBAAzC;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,IADS;AAEjBC,EAAAA,WAAW,EAAC;AAFK,CAAnB;;AAKA,IAAIC,aAAa,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKP,kBAAL;AACE;AACA,aAAO,EAAE,GAAGK,KAAL;AAAYH,QAAAA,MAAM,EAAEI,MAAM,CAACJ,MAA3B;AAAkCC,QAAAA,WAAW,EAACG,MAAM,CAACJ,MAAP,CAAcC;AAA5D,OAAP;;AACF;AACE,aAAOE,KAAP;AANJ;AAQD,CATD;;AAWA,MAAMG,SAAS,GAAC,CAACN,MAAD,EAAQC,WAAR,MAAuB;AAACI,EAAAA,IAAI,EAACP,kBAAN;AAAyBE,EAAAA,MAAzB;AAAgCC,EAAAA;AAAhC,CAAvB,CAAhB;;AAEA,OAAO,MAAMM,SAAS,GAAC,MAAI,CAACC,QAAD,EAAUC,QAAV,KAAqB;AAC9C;AACCd,EAAAA,OAAO,CAACY,SAAR,CAAkBE,QAAQ,GAAGC,IAAX,CAAgBC,MAAlC,EAA0CC,IAA1C,CAA+CC,QAAQ,IAAE;AACrDL,IAAAA,QAAQ,CAACF,SAAS,CAACO,QAAQ,CAACC,IAAV,CAAV,CAAR;AACH,GAFD;AAGF,CALM;AAMP,OAAO,MAAMC,YAAY,GAAEf,MAAD,IAAU,CAACQ,QAAD,EAAUC,QAAV,KAAqB;AACvD;AACCd,EAAAA,OAAO,CAACoB,YAAR,CAAsBN,QAAQ,GAAGC,IAAX,CAAgBC,MAAtC,EAA8CX,MAA9C,EAAsDY,IAAtD,CAA2DC,QAAQ,IAAE;AACjEL,IAAAA,QAAQ,CAACX,aAAa,CAACgB,QAAQ,CAACC,IAAT,CAAcE,OAAf,EAAuBH,QAAQ,CAACI,MAAhC,EAAuC,4BAAvC,CAAd,CAAR;AACH,GAFD,EAEGC,KAFH,CAESC,GAAG,IAAE;AACbX,IAAAA,QAAQ,CAACZ,YAAY,CAACuB,GAAG,CAACN,QAAJ,CAAaC,IAAd,EAAmBK,GAAG,CAACN,QAAJ,CAAaI,MAAhC,EAAuC,0BAAvC,CAAb,CAAR;AACD,GAJA;AAKF,CAPM;AAQP,OAAO,MAAMG,SAAS,GAAC,CAACpB,MAAD,EAAQC,WAAW,GAAC,IAApB,KAA2B,CAACO,QAAD,EAAUC,QAAV,KAAqB;AACrE;AACAd,EAAAA,OAAO,CAACyB,SAAR,CAAmBX,QAAQ,GAAGC,IAAX,CAAgBC,MAAnC,EAA2CX,MAA3C,EAAkDC,WAAlD,EAA+DW,IAA/D,CAAoEC,QAAQ,IAAE;AAC5EL,IAAAA,QAAQ,CAACF,SAAS,CAACO,QAAQ,CAACC,IAAV,CAAV,CAAR;AACD,GAFD;AAGD,CALM;AAOP,OAAO,MAAMO,eAAe,GAAEC,WAAD,IAAed,QAAQ,IAAE;AACpDb,EAAAA,OAAO,CAAC0B,eAAR,GAA0BT,IAA1B,CAA+BC,QAAQ,IAAE;AACvCL,IAAAA,QAAQ,CAACX,aAAa,CAACgB,QAAQ,CAACC,IAAT,CAAcE,OAAf,EAAuBH,QAAQ,CAACI,MAAhC,EAAuC,sBAAvC,CAAd,CAAR;AACD,GAFD,EAEGC,KAFH,CAESC,GAAG,IAAE;AACZX,IAAAA,QAAQ,CAACZ,YAAY,CAACuB,GAAG,CAACN,QAAJ,CAAaC,IAAd,EAAmBK,GAAG,CAACN,QAAJ,CAAaI,MAAhC,EAAuC,oBAAvC,CAAb,CAAR;AACD,GAJD;AAKD,CANM;AAQP,eAAef,aAAf","sourcesContent":["import { testAPI } from \"../api/api\";\nimport {returnErrors,returnSuccess} from './SuccessErrorReducer'\nconst GET_INFORM_OF_USER = \"GET_INFORM_OF_USER\";\n\nlet initialState = {\n  inform: null,\n  isAddInform:false\n};\n\nlet InformReducer = (state = initialState, action) => {\n  switch (action.type) {\n   \n    case GET_INFORM_OF_USER:\n      debugger\n      return { ...state, inform: action.inform,isAddInform:action.inform.isAddInform};\n    default:\n      return state;\n  }\n};\n\nconst addInform=(inform,isAddInform)=>({type:GET_INFORM_OF_USER,inform,isAddInform})\n\nexport const getInform=()=>(dispatch,getState)=>{\n  debugger\n   testAPI.getInform(getState().auth.userId).then(response=>{\n       dispatch(addInform(response.data))\n   })\n}\nexport const updateInform=(inform)=>(dispatch,getState)=>{\n  debugger\n   testAPI.updateInform((getState().auth.userId),inform).then(response=>{\n       dispatch(returnSuccess(response.data.message,response.status,'SUCCESS_USER_INFORM_CHANGE'))\n   }).catch(err=>{\n    dispatch(returnErrors(err.response.data,err.response.status,'USER_INFORM_CHANGE_ERROR'))\n  })\n}\nexport const setInform=(inform,isAddInform=true)=>(dispatch,getState)=>{\n  debugger\n  testAPI.setInform((getState().auth.userId),inform,isAddInform).then(response=>{\n    dispatch(addInform(response.data))\n  })\n}\n\nexport const sendHelpMessage=(helpMessage)=>dispatch=>{\n  testAPI.sendHelpMessage().then(response=>{\n    dispatch(returnSuccess(response.data.message,response.status,'SUCCESS_HELP_MESSAGE'))\n  }).catch(err=>{\n    dispatch(returnErrors(err.response.data,err.response.status,'ERROR_HELP_MESSAGE'))\n  })\n}\n\nexport default InformReducer"]},"metadata":{},"sourceType":"module"}