{"ast":null,"code":"import { clearCardItems } from './CardReducer';\nimport { testAPI } from \"../api/api\";\nconst ADD_ORDERS = \"ADD_ORDERS\";\nlet initialState = {\n  orders: [],\n  inform: null\n};\n\nlet OrdersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_ORDERS:\n      return { ...state,\n        orders: [...state.orders, ...action.items],\n        inform: action.inform\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const addOrders = (items, inform) => ({\n  type: ADD_ORDERS,\n  items,\n  inform\n});\nexport const getOrders = id => dispatch => {\n  testAPI.getOrders(id).then(response => {\n    dispatch(addOrders(response.data));\n  });\n};\nexport const addOrdersThunk = ({\n  items,\n  inform,\n  id\n}) => dispatch => {\n  debugger;\n  testAPI.setOrders(items, inform, id).then(response => {\n    dispatch(addOrders(items, inform));\n    dispatch(clearCardItems(null, null, null));\n  });\n};\nexport default OrdersReducer;","map":{"version":3,"sources":["/Users/anton/Desktop/myApp/client/src/redux/OrdersReducer.js"],"names":["clearCardItems","testAPI","ADD_ORDERS","initialState","orders","inform","OrdersReducer","state","action","type","items","addOrders","getOrders","id","dispatch","then","response","data","addOrdersThunk","setOrders"],"mappings":"AAAA,SAAQA,cAAR,QAA6B,eAA7B;AACA,SAASC,OAAT,QAAwB,YAAxB;AAGA,MAAMC,UAAU,GAAC,YAAjB;AAGA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,MAAM,EAAC;AAFU,CAAnB;;AAKA,IAAIC,aAAa,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,UAAL;AACI,aAAM,EAAC,GAAGK,KAAJ;AAAUH,QAAAA,MAAM,EAAC,CAAC,GAAGG,KAAK,CAACH,MAAV,EAAiB,GAAGI,MAAM,CAACE,KAA3B,CAAjB;AAAmDL,QAAAA,MAAM,EAACG,MAAM,CAACH;AAAjE,OAAN;;AACN;AACE,aAAOE,KAAP;AAJJ;AAMD,CAPD;;AAUC,OAAO,MAAMI,SAAS,GAAC,CAACD,KAAD,EAAOL,MAAP,MAAiB;AAACI,EAAAA,IAAI,EAACP,UAAN;AAAiBQ,EAAAA,KAAjB;AAAuBL,EAAAA;AAAvB,CAAjB,CAAhB;AAER,OAAO,MAAMO,SAAS,GAAEC,EAAD,IAAMC,QAAQ,IAAE;AACtCb,EAAAA,OAAO,CAACW,SAAR,CAAkBC,EAAlB,EAAsBE,IAAtB,CAA2BC,QAAQ,IAAE;AACjCF,IAAAA,QAAQ,CAACH,SAAS,CAACK,QAAQ,CAACC,IAAV,CAAV,CAAR;AACH,GAFD;AAGA,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAC,CAAC;AAACR,EAAAA,KAAD;AAAOL,EAAAA,MAAP;AAAcQ,EAAAA;AAAd,CAAD,KAAqBC,QAAQ,IAAE;AACvD;AACAb,EAAAA,OAAO,CAACkB,SAAR,CAAkBT,KAAlB,EAAwBL,MAAxB,EAA+BQ,EAA/B,EAAmCE,IAAnC,CAAwCC,QAAQ,IAAE;AAC9CF,IAAAA,QAAQ,CAACH,SAAS,CAACD,KAAD,EAAOL,MAAP,CAAV,CAAR;AACAS,IAAAA,QAAQ,CAACd,cAAc,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,CAAf,CAAR;AACD,GAHH;AAKH,CAPM;AASP,eAAeM,aAAf","sourcesContent":["import {clearCardItems} from './CardReducer'\nimport { testAPI } from \"../api/api\";\n\n\nconst ADD_ORDERS=\"ADD_ORDERS\"\n\n\nlet initialState = {\n  orders: [],\n  inform:null\n};\n\nlet OrdersReducer = (state = initialState, action) => {\n  switch (action.type) {\n      case ADD_ORDERS:\n          return{...state,orders:[...state.orders,...action.items],inform:action.inform}\n    default:\n      return state;\n  }\n};\n\n\n export const addOrders=(items,inform)=>({type:ADD_ORDERS,items,inform})\n \nexport const getOrders=(id)=>dispatch=>{\n testAPI.getOrders(id).then(response=>{\n     dispatch(addOrders(response.data))\n })\n}\n\nexport const addOrdersThunk=({items,inform,id})=>dispatch=>{\n    debugger\n    testAPI.setOrders(items,inform,id).then(response=>{\n        dispatch(addOrders(items,inform))\n        dispatch(clearCardItems(null,null,null))\n      })\n    \n}\n\nexport default OrdersReducer"]},"metadata":{},"sourceType":"module"}