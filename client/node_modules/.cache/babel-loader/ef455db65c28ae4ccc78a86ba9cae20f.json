{"ast":null,"code":"import * as axios from \"axios\";\nconst baseUrl = \"http://localhost:5000/\";\nlet instance = axios.create({\n  baseUrl: baseUrl,\n  headers: {\n    \"x-auth-token\": sessionStorage.getItem(\"token\")\n  }\n});\nexport const testAPI = {\n  changeFilter(data) {\n    debugger;\n    return axios.get(`http://localhost:5000/goods/filter?data=${data}`);\n  },\n\n  getMyUsers() {\n    return axios.get(\"http://localhost:5000/users\").then(response => response.data);\n  },\n\n  getGoods(pageNumber = 1, pageSize = 10) {\n    return instance.get(`http://localhost:5000/goods?page=${pageNumber}&pageSize=${pageSize}`).then(response => response.data);\n  },\n\n  getGood(id) {\n    return instance.get(baseUrl + `goods/${id}`);\n  },\n\n  login(email, password, rememberMe = false) {\n    return axios.post(\"http://localhost:5000/auth/\", {\n      email,\n      password,\n      rememberMe\n    });\n  },\n\n  register(name, email, password) {\n    return axios.post(\"http://localhost:5000/users\", {\n      name,\n      email,\n      password\n    });\n  },\n\n  forgotPassword(forgotEmail) {\n    return axios.post(\"http://localhost:5000/users/forgot_password\", {\n      forgotEmail\n    });\n  },\n\n  resetPassword(newPassword, verifyPassword, token) {\n    return instance.post(\"http://localhost:5000/users/reset_password\", {\n      newPassword,\n      verifyPassword,\n      token\n    });\n  },\n\n  changeUserPass(oldPass, newPassword, verifyPassword, email) {\n    return instance.post(\"http://localhost:5000/users/change_password\", {\n      oldPass,\n      newPassword,\n      verifyPassword,\n      email\n    });\n  },\n\n  getAuth() {\n    return instance.get(\"http://localhost:5000/auth/user\");\n  },\n\n  getReviews() {\n    return instance.get(\"http://localhost:5000/goods/reviews\").then(response => response.data);\n  },\n\n  setOrders(items, inform, id) {\n    return instance.post(`http://localhost:5000/orders`, {\n      items,\n      inform,\n      userId: id\n    });\n  },\n\n  getOrders(id) {\n    return instance.get(`http://localhost:5000/orders/${id}`);\n  },\n\n  getInform(id) {\n    return instance.get(`http://localhost:5000/inform/${id}`);\n  },\n\n  updateInform(id, inform) {\n    debugger;\n    const config = {\n      header: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return instance.put(`http://localhost:5000/inform/${id}`, inform, config);\n  },\n\n  setInform(id, inform) {\n    inform.append(\"isAddInform\", true);\n    const config = {\n      header: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return instance.post(`http://localhost:5000/inform/${id}`, inform, config);\n  },\n\n  sendHelpMessage(helpMessage, id) {\n    return instance.post(`http://localhost:5000/users/help`, {\n      helpMessage,\n      userId: id\n    });\n  },\n\n  setReviews(name, photo, files, goodsId, rating = 100) {\n    files.append(\"name\", name);\n    files.append(\"photo\", photo);\n    files.append(\"rating\", rating);\n    const config = {\n      header: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return instance.post(`http://localhost:5000/goods/reviews/${goodsId}`, files, config);\n  }\n\n};","map":{"version":3,"sources":["/Users/anton/Downloads/myApp-1/client/src/api/api.js"],"names":["axios","baseUrl","instance","create","headers","sessionStorage","getItem","testAPI","changeFilter","data","get","getMyUsers","then","response","getGoods","pageNumber","pageSize","getGood","id","login","email","password","rememberMe","post","register","name","forgotPassword","forgotEmail","resetPassword","newPassword","verifyPassword","token","changeUserPass","oldPass","getAuth","getReviews","setOrders","items","inform","userId","getOrders","getInform","updateInform","config","header","put","setInform","append","sendHelpMessage","helpMessage","setReviews","photo","files","goodsId","rating"],"mappings":"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","sourcesContent":["import * as axios from \"axios\";\n\nconst baseUrl = \"http://localhost:5000/\";\n\nlet instance = axios.create({\n  baseUrl: baseUrl,\n  headers: {\n    \"x-auth-token\": sessionStorage.getItem(\"token\"),\n  },\n});\n\nexport const testAPI = {\n  changeFilter(data){\n    debugger\n    return axios.get(\n      `http://localhost:5000/goods/filter?data=${data}`\n    )\n  },\n  getMyUsers() {\n    return axios\n      .get(\"http://localhost:5000/users\")\n      .then((response) => response.data);\n  },\n  getGoods(pageNumber = 1, pageSize = 10) {\n    return instance\n      .get(\n        `http://localhost:5000/goods?page=${pageNumber}&pageSize=${pageSize}`\n      )\n      .then((response) => response.data);\n  },\n  getGood(id) {\n    return instance.get(baseUrl + `goods/${id}`);\n  },\n  login(email, password, rememberMe = false) {\n    return axios.post(\"http://localhost:5000/auth/\", {\n      email,\n      password,\n      rememberMe,\n    });\n  },\n  register(name, email, password) {\n    return axios.post(\"http://localhost:5000/users\", { name, email, password });\n  },\n  forgotPassword(forgotEmail) {\n    return axios.post(\"http://localhost:5000/users/forgot_password\", {\n      forgotEmail,\n    });\n  },\n  resetPassword(newPassword, verifyPassword, token) {\n    return instance.post(\"http://localhost:5000/users/reset_password\", {\n      newPassword,\n      verifyPassword,\n      token,\n    });\n  },\n  changeUserPass(oldPass, newPassword, verifyPassword, email) {\n    return instance.post(\"http://localhost:5000/users/change_password\", {\n      oldPass,\n      newPassword,\n      verifyPassword,\n      email,\n    });\n  },\n  getAuth() {\n    return instance.get(\"http://localhost:5000/auth/user\");\n  },\n  getReviews() {\n    return instance\n      .get(\"http://localhost:5000/goods/reviews\")\n      .then((response) => response.data);\n  },\n  setOrders(items, inform, id) {\n    return instance.post(`http://localhost:5000/orders`, {\n      items,\n      inform,\n      userId: id,\n    });\n  },\n  getOrders(id) {\n    return instance.get(`http://localhost:5000/orders/${id}`);\n  },\n  getInform(id) {\n    return instance.get(`http://localhost:5000/inform/${id}`);\n  },\n  updateInform(id, inform) {\n    debugger\n    const config = {\n      header: {'Content-Type': 'multipart/form-data'}\n    };\n    return instance.put(`http://localhost:5000/inform/${id}`,inform,config );\n  },\n  setInform(id,inform) {\n    inform.append(\"isAddInform\",true)\n    const config = {\n      header: {'Content-Type':'multipart/form-data'}\n    };\n    return instance.post(`http://localhost:5000/inform/${id}`,inform,config );\n  },\n  sendHelpMessage(helpMessage, id) {\n    return instance.post(`http://localhost:5000/users/help`, {\n      helpMessage,\n      userId: id,\n    });\n  },\n  setReviews(name,photo,files,goodsId,rating=100) {\n   files.append(\"name\",name)\n   files.append(\"photo\",photo)\n   files.append(\"rating\",rating)\n    const config = {\n      header: {'Content-Type': 'multipart/form-data'}\n    };\n    return instance.post(\n      `http://localhost:5000/goods/reviews/${goodsId}`,\n      files,\n      config\n    );\n  },\n};\n"]},"metadata":{},"sourceType":"module"}