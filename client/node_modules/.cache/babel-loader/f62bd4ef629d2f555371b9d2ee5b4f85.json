{"ast":null,"code":"import * as axios from \"axios\";\nconst baseUrl = \"http://localhost:5000/\";\nlet instance = axios.create({\n  baseUrl: baseUrl,\n  headers: {\n    \"Content-Type\": \"multipart/form-data\",\n    boundary: \"someArbitraryUniqueString\",\n    \"x-auth-token\": sessionStorage.getItem(\"token\")\n  }\n});\nexport const testAPI = {\n  getMyUsers() {\n    return axios.get(\"http://localhost:5000/users\").then(response => response.data);\n  },\n\n  getGoods(pageNumber = 1, pageSize = 10) {\n    return instance.get(`http://localhost:5000/goods?page=${pageNumber}&pageSize=${pageSize}`).then(response => response.data);\n  },\n\n  getGood(id) {\n    return instance.get(baseUrl + `goods/${id}`);\n  },\n\n  login(email, password, rememberMe = false) {\n    return axios.post(\"http://localhost:5000/auth/\", {\n      email,\n      password,\n      rememberMe\n    });\n  },\n\n  register(name, email, password) {\n    return axios.post(\"http://localhost:5000/users\", {\n      name,\n      email,\n      password\n    });\n  },\n\n  forgotPassword(forgotEmail) {\n    return axios.post(\"http://localhost:5000/users/forgot_password\", {\n      forgotEmail\n    });\n  },\n\n  resetPassword(newPassword, verifyPassword, token) {\n    return instance.post(\"http://localhost:5000/users/reset_password\", {\n      newPassword,\n      verifyPassword,\n      token\n    });\n  },\n\n  changeUserPass(oldPass, newPassword, verifyPassword, email) {\n    return instance.post(\"http://localhost:5000/users/change_password\", {\n      oldPass,\n      newPassword,\n      verifyPassword,\n      email\n    });\n  },\n\n  getAuth() {\n    return instance.get(\"http://localhost:5000/auth/user\");\n  },\n\n  getReviews() {\n    return instance.get(\"http://localhost:5000/goods/reviews\").then(response => response.data);\n  },\n\n  setOrders(items, inform, id) {\n    return instance.post(`http://localhost:5000/orders`, {\n      items,\n      inform,\n      userId: id\n    });\n  },\n\n  getOrders(id) {\n    return instance.get(`http://localhost:5000/orders/${id}`);\n  },\n\n  getInform(id) {\n    return instance.get(`http://localhost:5000/inform/${id}`);\n  },\n\n  updateInform(id, inform) {\n    return instance.put(`http://localhost:5000/inform/${id}`, {\n      inform\n    });\n  },\n\n  setInform(id, inform, isAddInform = false) {\n    return instance.post(`http://localhost:5000/inform/${id}`, {\n      inform,\n      isAddInform\n    });\n  },\n\n  sendHelpMessage(helpMessage, id) {\n    return instance.post(`http://localhost:5000/users/help`, {\n      helpMessage,\n      userId: id\n    });\n  },\n\n  setReviews(name, files, goodsId) {\n    const config = {\n      header: {\n        \"content-type\": \"multipart/form-data\"\n      }\n    };\n    return instance.post(`http://localhost:5000/goods/reviews/${goodsId}`, files, config);\n  }\n\n};","map":{"version":3,"sources":["/Users/anton/Downloads/myApp-1/client/src/api/api.js"],"names":["axios","baseUrl","instance","create","headers","boundary","sessionStorage","getItem","testAPI","getMyUsers","get","then","response","data","getGoods","pageNumber","pageSize","getGood","id","login","email","password","rememberMe","post","register","name","forgotPassword","forgotEmail","resetPassword","newPassword","verifyPassword","token","changeUserPass","oldPass","getAuth","getReviews","setOrders","items","inform","userId","getOrders","getInform","updateInform","put","setInform","isAddInform","sendHelpMessage","helpMessage","setReviews","files","goodsId","config","header"],"mappings":"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","sourcesContent":["import * as axios from \"axios\";\n\nconst baseUrl = \"http://localhost:5000/\";\n\nlet instance = axios.create({\n  baseUrl: baseUrl,\n  headers: {\n    \"Content-Type\": \"multipart/form-data\",\n    boundary: \"someArbitraryUniqueString\",\n    \"x-auth-token\": sessionStorage.getItem(\"token\"),\n  },\n});\n\nexport const testAPI = {\n  getMyUsers() {\n    return axios\n      .get(\"http://localhost:5000/users\")\n      .then((response) => response.data);\n  },\n  getGoods(pageNumber = 1, pageSize = 10) {\n    return instance\n      .get(\n        `http://localhost:5000/goods?page=${pageNumber}&pageSize=${pageSize}`\n      )\n      .then((response) => response.data);\n  },\n  getGood(id) {\n    return instance.get(baseUrl + `goods/${id}`);\n  },\n  login(email, password, rememberMe = false) {\n    return axios.post(\"http://localhost:5000/auth/\", {\n      email,\n      password,\n      rememberMe,\n    });\n  },\n  register(name, email, password) {\n    return axios.post(\"http://localhost:5000/users\", { name, email, password });\n  },\n  forgotPassword(forgotEmail) {\n    return axios.post(\"http://localhost:5000/users/forgot_password\", {\n      forgotEmail,\n    });\n  },\n  resetPassword(newPassword, verifyPassword, token) {\n    return instance.post(\"http://localhost:5000/users/reset_password\", {\n      newPassword,\n      verifyPassword,\n      token,\n    });\n  },\n  changeUserPass(oldPass, newPassword, verifyPassword, email) {\n    return instance.post(\"http://localhost:5000/users/change_password\", {\n      oldPass,\n      newPassword,\n      verifyPassword,\n      email,\n    });\n  },\n  getAuth() {\n    return instance.get(\"http://localhost:5000/auth/user\");\n  },\n  getReviews() {\n    return instance\n      .get(\"http://localhost:5000/goods/reviews\")\n      .then((response) => response.data);\n  },\n  setOrders(items, inform, id) {\n    return instance.post(`http://localhost:5000/orders`, {\n      items,\n      inform,\n      userId: id,\n    });\n  },\n  getOrders(id) {\n    return instance.get(`http://localhost:5000/orders/${id}`);\n  },\n  getInform(id) {\n    return instance.get(`http://localhost:5000/inform/${id}`);\n  },\n  updateInform(id, inform) {\n    return instance.put(`http://localhost:5000/inform/${id}`, { inform });\n  },\n  setInform(id, inform, isAddInform = false) {\n    return instance.post(`http://localhost:5000/inform/${id}`, {\n      inform,\n      isAddInform,\n    });\n  },\n  sendHelpMessage(helpMessage, id) {\n    return instance.post(`http://localhost:5000/users/help`, {\n      helpMessage,\n      userId: id,\n    });\n  },\n  setReviews(name,files,goodsId) {\n    const config = {\n      header: { \"content-type\": \"multipart/form-data\"}\n    };\n    return instance.post(\n      `http://localhost:5000/goods/reviews/${goodsId}`,\n      files,\n      config\n    );\n  },\n};\n"]},"metadata":{},"sourceType":"module"}